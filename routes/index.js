var express = require('express');
var router = express.Router();


var glossery = [
  {terminology: "DevOps", description: "DevOps is a set of practices and cultural philosophies that aim to bridge the gap between software development (Dev) and IT operations (Ops). It promotes collaboration, communication, and integration between development and operations teams throughout the software development lifecycle.", reference: "'DevOps,' Atlassian. Available: https://www.atlassian.com/devops."},
  {terminology: "Agile Development", description: "Software development using the agile methodology places a strong emphasis on adaptability, client collaboration, and responsiveness to changing requirements. It encourages flexible planning, regular software delivery, and ongoing development via frequent feedback loops.", reference: "Atlassian, 'Agile,' Atlassian. Available: https://www.atlassian.com/agile."},
  {terminology: "Test-Driven Development (TDD)", description: "Test-Driven Development (TDD) is a development technique where the developer first writes a test before writing the production code to fulfill that test. This approach emphasizes the creation of tests that define and validate what the code will do.", reference: "Atlassian, 'Test-driven development (TDD)', Atlassian Agile Coach. Available: https://www.atlassian.com/agile/software-development/"},
  {terminology: "Serverless Architecture", description: "Serverless architectures allow developers to build and run applications and services without thinking about servers. With serverless architectures, your application still runs on servers, but all the server management is done by AWS.", reference: "Amazon Web Services, 'What is Serverless?', AWS. Available: https://aws.amazon.com/serverless/."},
  {terminology: "CI/CD Pipeline", description: "A CI/CD Pipeline is a series of steps that software must go through, from initial code push, to high-level testing, to deployment. CI stands for Continuous Integration, a software development practice where developers regularly merge their code changes into a central repository, followed by automated building and testing. CD stands for Continuous Delivery or Continuous Deployment, practices that further the automation, including the release process.", reference: "Red Hat, 'CI/CD,' Red Hat. Available: https://www.redhat.com/en/topics/devops/what-is-ci-cd"},
  {terminology: "Configuration Management", description: "Configuration management (CM) in a DevOps context, is the process of systematically managing, organizing, and controlling the changes in the documents, codes, and other entities during the software development process. It ensures that the current design and build state of the system is known and controlled at all times.", reference: "IBM, 'Configuration management in software engineering,' IBM. Available: https://www.ibm.com/cloud/learn/configuration-management."},
  {terminology: "Monitoring and Logging", description: "Monitoring and logging are crucial practices in DevOps. Monitoring provides feedback from operations and aids in understanding a system's performance and behavior. Logging provides the ability to analyze a discrete sequence of events in a system, which can help in troubleshooting and performance tuning.", reference: "Elastic, 'Logging vs. monitoring,' Elastic. Available: https://www.elastic.co/what-is/elk-stack/"},
  {terminology: "Cloud Computing", description: "Cloud Computing is the on-demand availability of computer system resources, especially data storage (cloud storage) and computing power, without direct active management by the user. The term is generally used to describe data centers available to many users over the Internet.", reference: "Microsoft, 'What is cloud computing? A beginnerâ€™s guide,' Microsoft Azure. Available: https://azure.microsoft.com/en-us/overview/what-is-cloud-computing/."},
  {terminology: "Ansible", description: "Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling infrastructure as code. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows.", reference: "Red Hat, 'Ansible,' Red Hat. Available: https://www.ansible.com/overview/it-automation"},
  {terminology: "Jenkins", description: "Jenkins is a free and open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery. It's a server-based system that runs in servlet containers such as Apache Tomcat.", reference: "Jenkins, 'Jenkins,' Jenkins. Available: https://www.jenkins.io/doc/book/"},
  {terminology: "Docker", description: "Docker is a platform used to develop, ship, and run applications inside containers. These containers allow developers to package up an application with all parts it needs, such as libraries and other dependencies, and ship it all out as one package.", reference: "Docker, 'What is a Container?', Docker. Available: https://www.docker.com/resources/what-container"},
  {terminology: "Microservices", description: "Microservices is an architectural style that structures an application as a collection of loosely coupled services. This allows the continuous delivery/deployment of large, complex applications and enhances the scalability and maintainability of applications.", reference: "Microsoft, 'Microservices Architecture', Microsoft Azure. Available: https://azure.microsoft.com/en-us/overview/microservices/"},
  {terminology: "Kubernetes", description: "Kubernetes, often abbreviated as K8s, is an open-source container orchestration platform designed to automate deploying, scaling, and operating application containers. It groups containers that make up an application into logical units for easy management and discovery.", reference: "Kubernetes, 'What is Kubernetes?', Kubernetes. Available: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/"},
  {terminology: "Infrastructure as Code (IaC)", description: "Infrastructure as Code (IaC) is the management of infrastructure (networks, virtual machines, load balancers, etc.) in a descriptive model, using the same versioning as DevOps team uses for source code.", reference: "HashiCorp, 'Infrastructure as Code', HashiCorp. Available: https://www.hashicorp.com/resources/what-is-infrastructure-as-code"},
  {terminology: "Continuous Testing", description: "Continuous Testing involves executing automated tests as part of the software delivery pipeline to obtain feedback on the business risks associated with a software release candidate as rapidly as possible.", reference: "Tricentis, 'What is Continuous Testing?', Tricentis. Available: https://www.tricentis.com/continuous-testing/"},
  {terminology: "Git", description: "Git is a distributed version control system used to track changes in source code during software development. It allows multiple developers to work from various locations and collaborate on code.", reference: "Git, 'About Version Control', Git. Available: https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control"},
  {terminology: "Scrum", description: "Scrum is an agile process framework for managing complex knowledge work, with an initial emphasis on software development. It is designed for teams of three to nine members, who break their work into actions that can be completed within time-boxed iterations.", reference: "Scrum.org, 'What is Scrum?', Scrum.org. Available: https://www.scrum.org/resources/what-is-scrum"},
  {terminology: "SaaS (Software as a Service)", description: "SaaS is a cloud computing service model that provides software applications over the internet on a subscription basis. It eliminates the need for organizations to install and run applications on their computers or data centers.", reference: "Microsoft, 'What is SaaS?', Microsoft Azure. Available: https://azure.microsoft.com/en-us/overview/what-is-saas/"},
  {terminology: "Virtualization", description: "Virtualization is the process of creating a virtual version of something, including virtual computer hardware systems, storage devices, and computer network resources. It allows multiple operating systems to run on a single physical machine.", reference: "VMware, 'What is Virtualization?', VMware. Available: https://www.vmware.com/solutions/virtualization.html"},
  {terminology: "RESTful API", description: "RESTful API (Representational State Transfer) is an architectural style that defines a set of constraints to be used for creating web services. It allows different software systems to communicate with each other over the internet using standard HTTP methods.", reference: "Mozilla, 'An overview of HTTP', MDN Web Docs. Available: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview"}
];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Cloud Glossary' ,glossery:glossery});
});

module.exports = router;